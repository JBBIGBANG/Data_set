# -*- coding: utf-8 -*-
"""LSTM(final).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SXlB5CuYEKHM-DjiApVOv1AIRN3vQFQE
"""

import pandas as pd
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Flatten

# preparing independent and dependent features
def prepare_data(timeseries_data, n_features):
	X, y =[],[]
	for i in range(len(timeseries_data)):
		# find the end of this pattern
		end_ix = i + n_features
		# check if we are beyond the sequence
		if end_ix > len(timeseries_data)-1:
			break
		# gather input and output parts of the pattern
		seq_x, seq_y = timeseries_data[i:end_ix], timeseries_data[end_ix]
		X.append(seq_x)
		y.append(seq_y)
	return np.array(X), np.array(y)

import requests  # Import the requests library

# Query URL
url = ('https://prediction-call.herokuapp.com/data/data-count')
# Some api's will have nicer syntax like:
# `&time=2010..2012` or `&na_item=B1GQ,D21`
print(url)
response = requests.get(url)  # Make a GET request to the URL
print(f"Request returned {response.status_code} : '{response.reason}'")
get_data = response.json() 
print(get_data)

# get_data
values = get_data
length = len(get_data)
print(length)



timeseries_data = values
n_steps = 30
# split into samples
X, y = prepare_data(timeseries_data, n_steps)

print(X),print(y)

X.shape

n_features = 1
X = X.reshape((X.shape[0], X.shape[1], n_features))

# define model
model = Sequential()
model.add(LSTM(50, activation='relu', return_sequences=True, input_shape=(n_steps, n_features)))
model.add(LSTM(50, activation='relu'))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')
# fit model
model.fit(X, y, epochs=300, verbose=1)

x_input = X[:3]
# x_input
next_days = 1

# demonstrate prediction for next 10 days
import math
x_input = timeseries_data[:n_steps+1]
temp_input=list(x_input)
lst_output=[]
i=0
while(i<next_days):
    
    if(len(temp_input)>3):
        x_input= np.array(temp_input[1:])
        print("{} day input {}".format(i,x_input))
        #print(x_input)
        x_input = x_input.reshape((1, n_steps, n_features))
        #print(x_input)
        yhat = model.predict(x_input, verbose=0)
        yhat = round(yhat[0][0])
        print("{} day output {}".format(i,yhat))
        temp_input.append(yhat)
        temp_input=temp_input[1:]
        #print(temp_input)
        lst_output.append(yhat)
        i=i+1
    else:
        x_input = x_input.reshape((1, n_steps, n_features))
        yhat = model.predict(x_input, verbose=0)
        yhat = round(yhat[0][0])

        print(yhat[0])
        temp_input.append(yhat)
        lst_output.append(yhat)
        i=i+1
    

print(lst_output)

import requests

url = 'https://prediction-call.herokuapp.com/data/predict-data'
myobj = {
    'predict_data':lst_output[0]
}
x = requests.post(url, json = myobj)

print(x.text)

